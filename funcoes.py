{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "N9CdSQdF2Kg_"
      },
      "outputs": [],
      "source": [
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score\n",
        "import plotly.express as px\n",
        "from scipy.stats import chi2_contingency\n",
        "import numpy as np\n",
        "from sklearn.metrics import cohen_kappa_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def qualitativas(df, var1, var2, normalize='none', cramers_v=True, chi2_test=True, cohen_kappa=True):\n",
        "    \"\"\"\n",
        "    Gera um mapa de calor interativo e opcionalmente calcula o V de Cramér, o Teste Qui-Quadrado e o Kappa de Cohen\n",
        "    para medir a associação entre var1 e várias variáveis de var2.\n",
        "\n",
        "    Parâmetros:\n",
        "    - df (pd.DataFrame): DataFrame contendo os dados.\n",
        "    - var1 (str): Nome da primeira variável categórica (eixo X).\n",
        "    - var2 (list of str): Lista de nomes das variáveis categóricas para comparar com var1 (eixo Y).\n",
        "    - normalize (str): Normalização dos dados ('none', 'all', 'index', 'columns').\n",
        "    - cramers_v (bool): Se True, calcula e exibe o V de Cramér para cada comparação.\n",
        "    - chi2_test (bool): Se True, realiza o Teste Qui-Quadrado entre as variáveis.\n",
        "    - cohen_kappa (bool): Se True, calcula o Kappa de Cohen entre as variáveis.\n",
        "\n",
        "    Retorna:\n",
        "    - Nada. Exibe o gráfico para cada variável de var2 e imprime as métricas de associação (se solicitado).\n",
        "    \"\"\"\n",
        "\n",
        "    # Verifica se as colunas existem no DataFrame\n",
        "    if var1 not in df.columns:\n",
        "        raise ValueError(\"A coluna var1 especificada não existe no DataFrame.\")\n",
        "\n",
        "    if not all(v in df.columns for v in var2):\n",
        "        raise ValueError(\"Uma ou mais colunas em var2 não existem no DataFrame.\")\n",
        "\n",
        "    for v in var2:\n",
        "        # Cria a tabela de contingência\n",
        "        contingency_table = pd.crosstab(df[v], df[var1], normalize=normalize if normalize != 'none' else False)\n",
        "\n",
        "        # Calcula o V de Cramér, se solicitado\n",
        "        if cramers_v:\n",
        "            absolute_table = pd.crosstab(df[v], df[var1])  # Tabela não normalizada\n",
        "            chi2, _, _, _ = chi2_contingency(absolute_table)\n",
        "            n = absolute_table.values.sum()\n",
        "            r, k = absolute_table.shape\n",
        "            v_cramer = np.sqrt(chi2 / (n * (min(r, k) - 1)))\n",
        "            print(f\"V de Cramér entre {var1} e {v}: {v_cramer:.2f}\")\n",
        "\n",
        "            # Interpretação do V de Cramér\n",
        "            if v_cramer < 0.10:\n",
        "                interpretation = \"Associação muito fraca ou nenhuma associação\"\n",
        "            elif v_cramer < 0.20:\n",
        "                interpretation = \"Associação fraca\"\n",
        "            elif v_cramer < 0.30:\n",
        "                interpretation = \"Associação moderada\"\n",
        "            else:\n",
        "                interpretation = \"Associação forte\"\n",
        "\n",
        "            print(f\"Interpretação para {v}: {interpretation}\\n\")\n",
        "\n",
        "        # Realiza o Teste Qui-Quadrado, se solicitado\n",
        "        if chi2_test:\n",
        "            chi2_stat, p_val, dof, expected = chi2_contingency(pd.crosstab(df[v], df[var1]))\n",
        "            print(f\"Teste Qui-Quadrado entre {var1} e {v}: Estatística Qui-Quadrado = {chi2_stat:.2f}, p-valor = {p_val:.4f}\")\n",
        "\n",
        "            if p_val < 0.05:\n",
        "                print(f\"Hipótese rejeitada: Existe associação significativa entre {var1} e {v}.\")\n",
        "            else:\n",
        "                print(f\"Hipótese não rejeitada: Não existe associação significativa entre {var1} e {v}.\\n\")\n",
        "\n",
        "        # Calcula o Kappa de Cohen, se solicitado\n",
        "        if cohen_kappa:\n",
        "            kappa = cohen_kappa_score(df[var1], df[v])\n",
        "            print(f\"Kappa de Cohen entre {var1} e {v}: {kappa:.2f}\")\n",
        "            if kappa < 0.20:\n",
        "                print(\"Interpretação: Concordância muito fraca ou nenhuma concordância.\")\n",
        "            elif kappa < 0.40:\n",
        "                print(\"Interpretação: Concordância fraca.\")\n",
        "            elif kappa < 0.60:\n",
        "                print(\"Interpretação: Concordância moderada.\")\n",
        "            elif kappa < 0.80:\n",
        "                print(\"Interpretação: Concordância forte.\")\n",
        "            else:\n",
        "                print(\"Interpretação: Concordância excelente.\\n\")\n",
        "\n",
        "        # Gera o heatmap com Plotly\n",
        "        fig = px.imshow(\n",
        "            contingency_table,\n",
        "            labels=dict(x=var1, y=v, color='Frequência'),\n",
        "            text_auto=True,\n",
        "            aspect=\"auto\",\n",
        "            color_continuous_scale=\"Viridis\"\n",
        "        )\n",
        "        fig.update_layout(\n",
        "            title=f\"Mapa de Calor entre {var1} e {v} (Normalização: {normalize})\",\n",
        "            xaxis_title=var1,\n",
        "            yaxis_title=v\n",
        "        )\n",
        "        fig.show()\n"
      ],
      "metadata": {
        "id": "s_MzE4Yh2kbr"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def quantitativas_qualitativas(df, target_variable, comparison_variables, target_type=\"categorical\"):\n",
        "    \"\"\"\n",
        "    Analisa a relação entre uma variável alvo (categórica ou numérica) e um conjunto de variáveis de comparação.\n",
        "    Cria gráficos de boxplot com Plotly e calcula o índice eta (η²) e o R² para variáveis numéricas e categóricas.\n",
        "\n",
        "    Parâmetros:\n",
        "    - df: DataFrame pandas contendo os dados.\n",
        "    - target_variable: Nome da variável alvo (pode ser categórica ou numérica).\n",
        "    - comparison_variables: Lista de nomes das variáveis para comparação (categóricas ou numéricas).\n",
        "    - target_type: Tipo da variável alvo ('categorical' ou 'numeric'). Padrão é 'categorical'.\n",
        "\n",
        "    Retorno:\n",
        "    - Nenhum. Exibe os gráficos e imprime os índices eta² e R².\n",
        "    \"\"\"\n",
        "    if target_variable not in df.columns:\n",
        "        raise ValueError(f\"A variável '{target_variable}' não está no DataFrame.\")\n",
        "\n",
        "    if not all(var in df.columns for var in comparison_variables):\n",
        "        raise ValueError(\"Uma ou mais variáveis especificadas não estão no DataFrame.\")\n",
        "\n",
        "    if target_type == \"categorical\":\n",
        "        # Verificar se a variável alvo é categórica\n",
        "        if not isinstance(df[target_variable].dtype, pd.CategoricalDtype) and \\\n",
        "           not pd.api.types.is_object_dtype(df[target_variable]):\n",
        "            raise ValueError(f\"A variável '{target_variable}' não é categórica.\")\n",
        "\n",
        "        # Converter para categórica, se necessário\n",
        "        df[target_variable] = df[target_variable].astype(\"category\")\n",
        "\n",
        "        # Calcular eta² e R² para cada variável numérica\n",
        "        eta_squared = {}\n",
        "        r_squared = {}\n",
        "        for num_var in comparison_variables:\n",
        "            if not np.issubdtype(df[num_var].dtype, np.number):\n",
        "                continue\n",
        "            temp_df = df[[target_variable, num_var]].dropna()\n",
        "            groups = temp_df.groupby(target_variable, observed=True)[num_var]\n",
        "            overall_mean = temp_df[num_var].mean()\n",
        "\n",
        "            # Variância entre os grupos\n",
        "            ss_between = sum(groups.size() * (groups.mean() - overall_mean) ** 2)\n",
        "            # Variância total\n",
        "            ss_total = sum((temp_df[num_var] - overall_mean) ** 2)\n",
        "\n",
        "            eta_squared[num_var] = ss_between / ss_total\n",
        "\n",
        "            # Calcular R² (coeficiente de determinação)\n",
        "            X = pd.get_dummies(temp_df[target_variable], drop_first=True)\n",
        "            y = temp_df[num_var]\n",
        "            model = LinearRegression()\n",
        "            model.fit(X, y)\n",
        "            y_pred = model.predict(X)\n",
        "            r_squared[num_var] = r2_score(y, y_pred)\n",
        "\n",
        "        # Ordenar as categorias com base na mediana de cada variável numérica\n",
        "        category_order = {}\n",
        "        for num_var in comparison_variables:\n",
        "            if not np.issubdtype(df[num_var].dtype, np.number):\n",
        "                continue\n",
        "            median_per_category = df.groupby(target_variable, observed=True)[num_var].median()\n",
        "            sorted_categories = median_per_category.sort_values(ascending=False).index\n",
        "            category_order[num_var] = sorted_categories\n",
        "\n",
        "        # Configuração de subplots: 4 gráficos por linha\n",
        "        num_graphs = len(comparison_variables)\n",
        "        rows = (num_graphs - 1) // 4 + 1  # Calcula o número de linhas necessárias\n",
        "        cols = 4  # Quatro gráficos por linha\n",
        "\n",
        "        fig = make_subplots(rows=rows, cols=cols, subplot_titles=comparison_variables)\n",
        "\n",
        "        # Adicionar gráficos\n",
        "        for idx, num_var in enumerate(comparison_variables):\n",
        "            if not np.issubdtype(df[num_var].dtype, np.number):\n",
        "                continue\n",
        "            temp_df = df[[target_variable, num_var]].dropna()\n",
        "            row = idx // cols + 1\n",
        "            col = idx % cols + 1\n",
        "\n",
        "            # Reordenar os valores de target_variable com base na mediana\n",
        "            temp_df[target_variable] = pd.Categorical(temp_df[target_variable], categories=category_order[num_var], ordered=True)\n",
        "\n",
        "            boxplot = go.Box(\n",
        "                x=temp_df[target_variable],\n",
        "                y=temp_df[num_var],\n",
        "                name=num_var\n",
        "            )\n",
        "            fig.add_trace(boxplot, row=row, col=col)\n",
        "\n",
        "        # Layout final\n",
        "        fig.update_layout(\n",
        "            height=300 * rows,  # Ajusta altura com base no número de linhas\n",
        "            title_text=f\"Boxplots de {target_variable} com variáveis numéricas\",\n",
        "            showlegend=False,\n",
        "            template=\"plotly_white\"\n",
        "        )\n",
        "        fig.show()\n",
        "\n",
        "        # Exibir índices eta² e R²\n",
        "        print(\"Índices Eta² e R² (Associação entre variável categórica e numéricas):\")\n",
        "        for var in eta_squared:\n",
        "            print(f\"{var}: Eta² = {eta_squared[var]}, R² = {r_squared[var]}\")\n",
        "\n",
        "    elif target_type == \"numeric\":\n",
        "        # Para a variável numérica como alvo, calcular eta² com variáveis categóricas\n",
        "        eta_squared = {}\n",
        "        r_squared = {}\n",
        "        for cat_var in comparison_variables:\n",
        "            if isinstance(df[cat_var].dtype, pd.CategoricalDtype) or pd.api.types.is_object_dtype(df[cat_var]):\n",
        "                temp_df = df[[target_variable, cat_var]].dropna()\n",
        "                groups = temp_df.groupby(cat_var, observed=True)[target_variable]\n",
        "                overall_mean = temp_df[target_variable].mean()\n",
        "\n",
        "                # Variância entre os grupos\n",
        "                ss_between = sum(groups.size() * (groups.mean() - overall_mean) ** 2)\n",
        "                # Variância total\n",
        "                ss_total = sum((temp_df[target_variable] - overall_mean) ** 2)\n",
        "\n",
        "                eta_squared[cat_var] = ss_between / ss_total\n",
        "\n",
        "                # Calcular R² (coeficiente de determinação)\n",
        "                X = pd.get_dummies(temp_df[cat_var], drop_first=True)\n",
        "                y = temp_df[target_variable]\n",
        "                model = LinearRegression()\n",
        "                model.fit(X, y)\n",
        "                y_pred = model.predict(X)\n",
        "                r_squared[cat_var] = r2_score(y, y_pred)\n",
        "\n",
        "        # Configuração de subplots: 4 gráficos por linha\n",
        "        num_graphs = len(comparison_variables)\n",
        "        rows = (num_graphs - 1) // 4 + 1  # Calcula o número de linhas necessárias\n",
        "        cols = 4  # Quatro gráficos por linha\n",
        "\n",
        "        fig = make_subplots(rows=rows, cols=cols, subplot_titles=comparison_variables)\n",
        "\n",
        "        # Adicionar gráficos\n",
        "        for idx, cat_var in enumerate(comparison_variables):\n",
        "            if not (isinstance(df[cat_var].dtype, pd.CategoricalDtype) or pd.api.types.is_object_dtype(df[cat_var])):\n",
        "                continue\n",
        "            temp_df = df[[target_variable, cat_var]].dropna()\n",
        "            row = idx // cols + 1\n",
        "            col = idx % cols + 1\n",
        "\n",
        "            boxplot = go.Box(\n",
        "                x=temp_df[cat_var],\n",
        "                y=temp_df[target_variable],\n",
        "                name=cat_var\n",
        "            )\n",
        "            fig.add_trace(boxplot, row=row, col=col)\n",
        "\n",
        "        # Layout final\n",
        "        fig.update_layout(\n",
        "            height=300 * rows,  # Ajusta altura com base no número de linhas\n",
        "            title_text=f\"Boxplots de {target_variable} com variáveis categóricas\",\n",
        "            showlegend=False,\n",
        "            template=\"plotly_white\"\n",
        "        )\n",
        "        fig.show()\n",
        "\n",
        "        # Exibir índices eta² e R²\n",
        "        print(\"Índices Eta² e R² (Associação entre variável numérica e categóricas):\")\n",
        "        for var in eta_squared:\n",
        "            print(f\"{var}: Eta² = {eta_squared[var]}, R² = {r_squared[var]}\")\n",
        "\n",
        "    else:\n",
        "        raise ValueError(\"O parâmetro 'target_type' deve ser 'categorical' ou 'numeric'.\")\n"
      ],
      "metadata": {
        "id": "f_LLP8Kp2lS6"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def quantitativas(df, target_variable, variables_to_compare):\n",
        "    \"\"\"\n",
        "    Analisa a correlação entre uma variável alvo e um conjunto de variáveis específicas,\n",
        "    exibindo as correlações de Pearson e Spearman.\n",
        "    Remove valores faltantes apenas para as comparações realizadas, sem modificar o DataFrame original.\n",
        "\n",
        "    Parâmetros:\n",
        "    - df: DataFrame pandas contendo os dados.\n",
        "    - target_variable: Nome da variável alvo.\n",
        "    - variables_to_compare: Lista de nomes das variáveis a serem comparadas com a variável alvo.\n",
        "\n",
        "    Retorno:\n",
        "    - Nenhum. Exibe os gráficos de dispersão organizados e imprime as correlações.\n",
        "    \"\"\"\n",
        "    if target_variable not in df.columns:\n",
        "        raise ValueError(f\"A variável '{target_variable}' não está no DataFrame.\")\n",
        "\n",
        "    if not all(var in df.columns for var in variables_to_compare):\n",
        "        raise ValueError(\"Uma ou mais variáveis especificadas não estão no DataFrame.\")\n",
        "\n",
        "    # Selecionar apenas variáveis numéricas entre as especificadas\n",
        "    numeric_df = df.select_dtypes(include='number')\n",
        "    variables_to_compare = [var for var in variables_to_compare if var in numeric_df.columns]\n",
        "\n",
        "    if target_variable not in numeric_df.columns:\n",
        "        raise ValueError(f\"A variável '{target_variable}' não é numérica.\")\n",
        "\n",
        "    correlations_pearson = {}\n",
        "    correlations_spearman = {}\n",
        "    num_vars = len(variables_to_compare)\n",
        "    num_cols = 4  # Número de colunas no layout\n",
        "    num_rows = -(-num_vars // num_cols)  # Cálculo do número de linhas (arredondamento para cima)\n",
        "\n",
        "    # Criar subplots\n",
        "    fig = make_subplots(\n",
        "        rows=num_rows, cols=num_cols,\n",
        "    )\n",
        "\n",
        "    # Gerar gráficos de dispersão e adicionar às subplots\n",
        "    for i, var in enumerate(variables_to_compare):\n",
        "        row = i // num_cols + 1\n",
        "        col = i % num_cols + 1\n",
        "\n",
        "        # Remover valores faltantes antes de calcular correlação\n",
        "        temp_df = numeric_df[[target_variable, var]].dropna()\n",
        "\n",
        "        # Correlação de Pearson\n",
        "        corr_pearson = temp_df[target_variable].corr(temp_df[var])\n",
        "        correlations_pearson[var] = corr_pearson\n",
        "\n",
        "        # Correlação de Spearman\n",
        "        corr_spearman = temp_df[target_variable].corr(temp_df[var], method='spearman')\n",
        "        correlations_spearman[var] = corr_spearman\n",
        "\n",
        "        scatter = go.Scatter(\n",
        "            x=temp_df[var],\n",
        "            y=temp_df[target_variable],\n",
        "            mode='markers',\n",
        "            marker=dict(size=6),\n",
        "            name=f\"{var}\",\n",
        "        )\n",
        "        fig.add_trace(scatter, row=row, col=col)\n",
        "\n",
        "        # Atualizar o eixo X para cada gráfico com o nome da variável\n",
        "        fig.update_xaxes(title_text=var, row=row, col=col)\n",
        "        # Atualizar o eixo Y para todos os gráficos com a variável alvo\n",
        "        fig.update_yaxes(title_text=target_variable, row=row, col=col)\n",
        "\n",
        "    # Atualizar layout geral\n",
        "    fig.update_layout(\n",
        "        height=300 * num_rows,  # Ajustar altura do gráfico\n",
        "        width=1200,  # Largura fixa\n",
        "        title_text=f\"Análise de Correlação com {target_variable}\",\n",
        "        showlegend=False,\n",
        "        template=\"plotly_white\"\n",
        "    )\n",
        "\n",
        "    # Mostrar gráfico\n",
        "    fig.show()\n",
        "\n",
        "    # Exibir índices de correlação\n",
        "    print(\"Índices de Correlação de Pearson (linear):\")\n",
        "    for var, corr in correlations_pearson.items():\n",
        "        print(f\"{var}: {corr:.2f}\")\n",
        "\n",
        "    print(\"\\nÍndices de Correlação de Spearman (não linear):\")\n",
        "    for var, corr in correlations_spearman.items():\n",
        "        print(f\"{var}: {corr:.2f}\")\n"
      ],
      "metadata": {
        "id": "0RR3ZJDh2ncr"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_PFzjdt02x9E"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
